<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NRegFreeCom</name>
    </assembly>
    <members>
        <member name="T:NRegFreeCom.Interop.REGCLS">
            <summary>
            The REGCLS enumeration defines values used in CoRegisterClassObject to 
            control the type of connections to a class object.
            </summary>
        </member>
        <member name="T:NRegFreeCom.RotRegFreeComInvoker">
            <summary>
            Allows to invoke Out of Proc COM object if Windows registy does  contains no info about COM class and interfaces.
            Adds some layer of indirection with some overhead comparable with ovehead 
            add by routing usual .NET call from C# to usual native COM via interop assembly.
            </summary>
            <remarks>
            Process monitor shows that .NET in client process goes to registry if do QueryInterface(cast) for COM object inteface. 
            If there is no registry then cast fails. Hence this hack is needed.
            If to debug view System._ComOject then it found interface inside only if registy is here, othervice no.
            Potentilly this is optimization not to do inter process call to COM object...
            </remarks>
        </member>
        <member name="M:NRegFreeCom.RotRegFreeComInvoker.GetRealObjectByProxy``1(System.Object)">
            <summary>
            If COM object was passed accros AppDomains it was proxied. Better to unproxy and call real COM (its RCW).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:NRegFreeCom.ReferenceCountedObject">
            <summary>
            Reference counted object base or delegation.
            </summary>
        </member>
        <member name="M:NRegFreeCom.ReferenceCountedObject.Lock">
            <summary>
             Increment the lock count of objects in the COM server.
            </summary>
            <returns>The new lock count after the increment</returns>
            <remarks>The method is thread-safe.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NRegFreeCom.ReferenceCountedObject.Unlock" -->
        <member name="P:NRegFreeCom.ReferenceCountedObject.LockCount">
            <summary>
            Get the current lock count.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NRegFreeCom.Interop.WM">
            <summary>
            Windows Messages
            Defined in winuser.h from Windows SDK v6.1
            Documentation pulled from MSDN.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NULL">
            <summary>
            The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CREATE">
            <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.DESTROY">
            <summary>
            The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen. 
            This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
            /// </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MOVE">
            <summary>
            The WM_MOVE message is sent after a window has been moved. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SIZE">
            <summary>
            The WM_SIZE message is sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.ACTIVATE">
            <summary>
            The WM_ACTIVATE message is sent to both the window being activated and the window being deactivated. If the windows use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window being deactivated, then to the window procedure of the top-level window being activated. If the windows use different input queues, the message is sent asynchronously, so the window is activated immediately. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SETFOCUS">
            <summary>
            The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.KILLFOCUS">
            <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.ENABLE">
            <summary>
            The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SETREDRAW">
            <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SETTEXT">
            <summary>
            An application sends a WM_SETTEXT message to set the text of a window. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.GETTEXT">
            <summary>
            An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.GETTEXTLENGTH">
            <summary>
            An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CLOSE">
            <summary>
            The WM_CLOSE message is sent as a signal that a window or an application should terminate.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.QUERYENDSESSION">
            <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero.
            After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.QUERYOPEN">
            <summary>
            The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.ENDSESSION">
            <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.QUIT">
            <summary>
            The WM_QUIT message indicates a request to terminate an application and is generated when the application calls the PostQuitMessage function. It causes the GetMessage function to return zero.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.ERASEBKGND">
            <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SYSCOLORCHANGE">
            <summary>
            This message is sent to all top-level windows when a change is made to a system color setting. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SHOWWINDOW">
            <summary>
            The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.WININICHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SETTINGCHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.DEVMODECHANGE">
            <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.ACTIVATEAPP">
            <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.FONTCHANGE">
            <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.TIMECHANGE">
            <summary>
            A message that is sent whenever there is a change in the system time.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CANCELMODE">
            <summary>
            The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SETCURSOR">
            <summary>
            The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MOUSEACTIVATE">
            <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CHILDACTIVATE">
            <summary>
            The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.QUEUESYNC">
            <summary>
            The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.GETMINMAXINFO">
            <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.PAINTICON">
            <summary>
            Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.ICONERASEBKGND">
            <summary>
            Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NEXTDLGCTL">
            <summary>
            The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SPOOLERSTATUS">
            <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.DRAWITEM">
            <summary>
            The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MEASUREITEM">
            <summary>
            The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.DELETEITEM">
            <summary>
            Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.VKEYTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CHARTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SETFONT">
            <summary>
            An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.GETFONT">
            <summary>
            An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SETHOTKEY">
            <summary>
            An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.GETHOTKEY">
            <summary>
            An application sends a WM_GETHOTKEY message to determine the hot key associated with a window. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.QUERYDRAGICON">
            <summary>
            The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.COMPAREITEM">
            <summary>
            The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.GETOBJECT">
            <summary>
            Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application. 
            Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.COMPACTING">
            <summary>
            The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.COMMNOTIFY">
            <summary>
            WM_COMMNOTIFY is Obsolete for Win32-Based Applications
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.WINDOWPOSCHANGING">
            <summary>
            The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.WINDOWPOSCHANGED">
            <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.POWER">
            <summary>
            Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode.
            Use: POWERBROADCAST
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.COPYDATA">
            <summary>
            An application sends the WM_COPYDATA message to pass data to another application. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CANCELJOURNAL">
            <summary>
            The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NOTIFY">
            <summary>
            Sent by a common control to its parent window when an event has occurred or the control requires some information. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.INPUTLANGCHANGEREQUEST">
            <summary>
            The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.INPUTLANGCHANGE">
            <summary>
            The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.TCARD">
            <summary>
            Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.HELP">
            <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.USERCHANGED">
            <summary>
            The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NOTIFYFORMAT">
            <summary>
            Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CONTEXTMENU">
            <summary>
            The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.STYLECHANGING">
            <summary>
            The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.STYLECHANGED">
            <summary>
            The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.DISPLAYCHANGE">
            <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.GETICON">
            <summary>
            The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SETICON">
            <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCCREATE">
            <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCDESTROY">
            <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window. 
            The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCCALCSIZE">
            <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCHITTEST">
            <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCPAINT">
            <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCACTIVATE">
            <summary>
            The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.GETDLGCODE">
            <summary>
            The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SYNCPAINT">
            <summary>
            The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCMOUSEMOVE">
            <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCLBUTTONDOWN">
            <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCLBUTTONUP">
            <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCLBUTTONDBLCLK">
            <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCRBUTTONDOWN">
            <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCRBUTTONUP">
            <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCRBUTTONDBLCLK">
            <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCMBUTTONDOWN">
            <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCMBUTTONUP">
            <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCMBUTTONDBLCLK">
            <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCXBUTTONDOWN">
            <summary>
            The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCXBUTTONUP">
            <summary>
            The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCXBUTTONDBLCLK">
            <summary>
            The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.INPUT_DEVICE_CHANGE">
            <summary>
            The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.INPUT">
            <summary>
            The WM_INPUT message is sent to the window that is getting raw input. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.KEYFIRST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CHAR">
            <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.DEADCHAR">
            <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SYSCHAR">
            <summary>
            The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SYSDEADCHAR">
            <summary>
            The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.UNICHAR">
            <summary>
            The WM_UNICHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_UNICHAR message contains the character code of the key that was pressed. 
            The WM_UNICHAR message is equivalent to WM_CHAR, but it uses Unicode Transformation Format (UTF)-32, whereas WM_CHAR uses UTF-16. It is designed to send or post Unicode characters to ANSI windows and it can can handle Unicode Supplementary Plane characters.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.KEYLAST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.IME_STARTCOMPOSITION">
            <summary>
            Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.IME_ENDCOMPOSITION">
            <summary>
            Sent to an application when the IME ends composition. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.IME_COMPOSITION">
            <summary>
            Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.INITDIALOG">
            <summary>
            The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.COMMAND">
            <summary>
            The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SYSCOMMAND">
            <summary>
            A window receives this message when the user chooses a command from the Window menu, clicks the maximize button, minimize button, restore button, close button, or moves the form. You can stop the form from moving by filtering this out.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.TIMER">
            <summary>
            The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.HSCROLL">
            <summary>
            The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.VSCROLL">
            <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.INITMENU">
            <summary>
            The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.INITMENUPOPUP">
            <summary>
            The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MENUSELECT">
            <summary>
            The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MENUCHAR">
            <summary>
            The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.ENTERIDLE">
            <summary>
            The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MENURBUTTONUP">
            <summary>
            The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MENUDRAG">
            <summary>
            The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MENUGETOBJECT">
            <summary>
            The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.UNINITMENUPOPUP">
            <summary>
            The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MENUCOMMAND">
            <summary>
            The WM_MENUCOMMAND message is sent when the user makes a selection from a menu. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CHANGEUISTATE">
            <summary>
            An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.UPDATEUISTATE">
            <summary>
            An application sends the WM_UPDATEUISTATE message to change the user interface (UI) state for the specified window and all its child windows.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.QUERYUISTATE">
            <summary>
            An application sends the WM_QUERYUISTATE message to retrieve the user interface (UI) state for a window.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CTLCOLORMSGBOX">
            <summary>
            The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CTLCOLOREDIT">
            <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CTLCOLORLISTBOX">
            <summary>
            Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CTLCOLORBTN">
            <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CTLCOLORDLG">
            <summary>
            The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CTLCOLORSCROLLBAR">
            <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the display context handle to set the background color of the scroll bar control. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CTLCOLORSTATIC">
            <summary>
            A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MOUSEFIRST">
            <summary>
            Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MBUTTONDBLCLK">
            <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.XBUTTONDOWN">
            <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.XBUTTONUP">
            <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.XBUTTONDBLCLK">
            <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MOUSEHWHEEL">
            <summary>
            The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MOUSELAST">
            <summary>
            Use WM_MOUSELAST to specify the last mouse message. Used with PeekMessage() Function.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.PARENTNOTIFY">
            <summary>
            The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.ENTERMENULOOP">
            <summary>
            The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.EXITMENULOOP">
            <summary>
            The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NEXTMENU">
            <summary>
            The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SIZING">
            <summary>
            The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CAPTURECHANGED">
            <summary>
            The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MOVING">
            <summary>
            The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.POWERBROADCAST">
            <summary>
            Notifies applications that a power-management event has occurred.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.DEVICECHANGE">
            <summary>
            Notifies an application of a change to the hardware configuration of a device or the computer.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MDICREATE">
            <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MDIDESTROY">
            <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MDIACTIVATE">
            <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MDIRESTORE">
            <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MDINEXT">
            <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MDIMAXIMIZE">
            <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MDITILE">
            <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MDICASCADE">
            <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MDIICONARRANGE">
            <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MDIGETACTIVE">
            <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MDISETMENU">
            <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window, to replace the window menu of the frame window, or both. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.ENTERSIZEMOVE">
            <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns. 
            The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.EXITSIZEMOVE">
            <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.DROPFILES">
            <summary>
            Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MDIREFRESHMENU">
            <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.IME_SETCONTEXT">
            <summary>
            Sent to an application when a window is activated. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.IME_NOTIFY">
            <summary>
            Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.IME_CONTROL">
            <summary>
            Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls the SendMessage function with the following parameters.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.IME_COMPOSITIONFULL">
            <summary>
            Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.IME_SELECT">
            <summary>
            Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.IME_CHAR">
            <summary>
            Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.IME_REQUEST">
            <summary>
            Sent to an application to provide commands and request information. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.IME_KEYDOWN">
            <summary>
            Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.IME_KEYUP">
            <summary>
            Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MOUSEHOVER">
            <summary>
            The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.MOUSELEAVE">
            <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCMOUSEHOVER">
            <summary>
            The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.NCMOUSELEAVE">
            <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.WTSSESSION_CHANGE">
            <summary>
            The WM_WTSSESSION_CHANGE message notifies applications of changes in session state.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CUT">
            <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.COPY">
            <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.PASTE">
            <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CLEAR">
            <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.UNDO">
            <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.RENDERFORMAT">
            <summary>
            The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.RENDERALLFORMATS">
            <summary>
            The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.DESTROYCLIPBOARD">
            <summary>
            The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.DRAWCLIPBOARD">
            <summary>
            The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.PAINTCLIPBOARD">
            <summary>
            The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.VSCROLLCLIPBOARD">
            <summary>
            The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SIZECLIPBOARD">
            <summary>
            The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.ASKCBFORMATNAME">
            <summary>
            The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CHANGECBCHAIN">
            <summary>
            The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.HSCROLLCLIPBOARD">
            <summary>
            The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.QUERYNEWPALETTE">
            <summary>
            This message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.PALETTEISCHANGING">
            <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.PALETTECHANGED">
            <summary>
            This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette. 
            This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.HOTKEY">
            <summary>
            The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.PRINT">
            <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.PRINTCLIENT">
            <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.APPCOMMAND">
            <summary>
            The WM_APPCOMMAND message notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.THEMECHANGED">
            <summary>
            The WM_THEMECHANGED message is broadcast to every window following a theme change event. Examples of theme change events are the activation of a theme, the deactivation of a theme, or a transition from one theme to another.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CLIPBOARDUPDATE">
            <summary>
            Sent when the contents of the clipboard have changed.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.DWMCOMPOSITIONCHANGED">
            <summary>
            The system will send a window the WM_DWMCOMPOSITIONCHANGED message to indicate that the availability of desktop composition has changed.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.DWMNCRENDERINGCHANGED">
            <summary>
            WM_DWMNCRENDERINGCHANGED is called when the non-client area rendering status of a window has changed. Only windows that have set the flag DWM_BLURBEHIND.fTransitionOnMaximized to true will get this message. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.DWMCOLORIZATIONCOLORCHANGED">
            <summary>
            Sent to all top-level windows when the colorization color has changed. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.DWMWINDOWMAXIMIZEDCHANGE">
            <summary>
            WM_DWMWINDOWMAXIMIZEDCHANGE will let you know when a DWM composed window is maximized. You also have to register for this message as well. You'd have other windowd go opaque when this message is sent.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.GETTITLEBARINFOEX">
            <summary>
            Sent to request extended title bar information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.APP">
            <summary>
            The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.USER">
            <summary>
            The WM_USER constant is used by applications to help define private messages for use by private window classes, usually of the form WM_USER+X, where X is an integer value. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CPL_LAUNCH">
            <summary>
            An application sends the WM_CPL_LAUNCH message to Windows Control Panel to request that a Control Panel application be started. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.CPL_LAUNCHED">
            <summary>
            The WM_CPL_LAUNCHED message is sent when a Control Panel application, started by the WM_CPL_LAUNCH message, has closed. The WM_CPL_LAUNCHED message is sent to the window identified by the wParam parameter of the WM_CPL_LAUNCH message that started the application. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WM.SYSTIMER">
            <summary>
            WM_SYSTIMER is a well-known yet still undocumented message. Windows uses WM_SYSTIMER for internal actions like scrolling.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.ClassStyles.ByteAlignClient">
            <summary>Aligns the window's client area on a byte boundary (in the x direction). This style affects the width of the window and its horizontal placement on the display.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.ClassStyles.ByteAlignWindow">
            <summary>Aligns the window on a byte boundary (in the x direction). This style affects the width of the window and its horizontal placement on the display.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.ClassStyles.ClassDC">
            <summary>
            Allocates one device context to be shared by all windows in the class.
            Because window classes are process specific, it is possible for multiple threads of an application to create a window of the same class.
            It is also possible for the threads to attempt to use the device context simultaneously. When this happens, the system allows only one thread to successfully finish its drawing operation.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.ClassStyles.DoubleClicks">
            <summary>Sends a double-click message to the window procedure when the user double-clicks the mouse while the cursor is within a window belonging to the class.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.ClassStyles.DropShadow">
            <summary>
            Enables the drop shadow effect on a window. The effect is turned on and off through SPI_SETDROPSHADOW.
            Typically, this is enabled for small, short-lived windows such as menus to emphasize their Z order relationship to other windows.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.ClassStyles.GlobalClass">
            <summary>Indicates that the window class is an application global class. For more information, see the "Application Global Classes" section of About Window Classes.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.ClassStyles.HorizontalRedraw">
            <summary>Redraws the entire window if a movement or size adjustment changes the width of the client area.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.ClassStyles.NoClose">
            <summary>Disables Close on the window menu.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.ClassStyles.OwnDC">
            <summary>Allocates a unique device context for each window in the class.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.ClassStyles.ParentDC">
            <summary>
            Sets the clipping rectangle of the child window to that of the parent window so that the child can draw on the parent.
            A window with the CS_PARENTDC style bit receives a regular device context from the system's cache of device contexts.
            It does not give the child the parent's device context or device context settings. Specifying CS_PARENTDC enhances an application's performance.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.ClassStyles.SaveBits">
            <summary>
            Saves, as a bitmap, the portion of the screen image obscured by a window of this class.
            When the window is removed, the system uses the saved bitmap to restore the screen image, including other windows that were obscured.
            Therefore, the system does not send WM_PAINT messages to windows that were obscured if the memory used by the bitmap has not been discarded and if other screen actions have not invalidated the stored image.
            This style is useful for small windows (for example, menus or dialog boxes) that are displayed briefly and then removed before other screen activity takes place.
            This style increases the time required to display the window, because the system must first allocate memory to store the bitmap.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.ClassStyles.VerticalRedraw">
            <summary>Redraws the entire window if a movement or size adjustment changes the height of the client area.</summary>
        </member>
        <member name="M:NRegFreeCom.IAssembly.LoadStringTableResource(System.UInt32)">
            <summary>
            Loads string table resources from assembly.
            </summary>
            <param name="id">The identifier of the string to be loaded.</param>
            <returns></returns>
            <seealso href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms647486.aspx"/>
        </member>
        <member name="M:NRegFreeCom.IAssembly.GetDelegate``1(System.String)">
            <summary>
            Gets public function from native library.
            </summary>
            <typeparam name="T">
            Managed counterpart delegate of native function. 
            If <paramref name="defName"/> not provided then <typeparamref name="T"/> <see cref="P:System.Reflection.MemberInfo.Name"/> is used for search.
            </typeparam>
            <paramref name="defName">Optional name of function. If not defined then name of<typeparamref name="T"/> is used</paramref>
            <returns></returns>
            <exception cref="T:System.EntryPointNotFoundException">No such export in library</exception>
        </member>
        <member name="M:NRegFreeCom.IAssembly.TryGetDelegate``1(``0@,System.String)">
            <summary>
            Tries to get public function from native library. Returns false if no function was found.
            </summary>
            <typeparam name="T">
            Managed counterpart delegate of native function. 
            If <paramref name="defName"/> not provided then <typeparamref name="T"/> <see cref="P:System.Reflection.MemberInfo.Name"/> is used for search.
            </typeparam>
            <paramref name="defName">Optional name of function. If not defined then name of<typeparamref name="T"/> is used</paramref>
            <returns></returns>
        </member>
        <member name="T:NRegFreeCom.AssemblySystem">
            <summary>
            Makes working with native dlls as with .NET ones. Helps define search paths and transform errors to .NET friendly.
            Hides differences of windows versions. 
            </summary>
            <remarks>
            Potential usages - runtime search and invocation of C routines; .NET plugin model extended with native dlls.
            Instance methods are not thread safe.
            </remarks>
        </member>
        <member name="T:NRegFreeCom.IAssemblySystem">
            <summary>
            Makes working with native dlls as with .NET ones.
            </summary>
        </member>
        <member name="M:NRegFreeCom.IAssemblySystem.GetAnyCpuPath(System.String)">
            <summary>
            Gets native libraries subdirectory of suitable processor architectue and bitness  for managed process (which can be Any Cpu).
            Can be imploed in XCOPY deployment were managed code depends upon native libraries.
            </summary>
            <param name="directoryPath"></param>
            <returns></returns>
        </member>
        <member name="M:NRegFreeCom.IAssemblySystem.LoadFrom(System.String,System.String)">
            <summary>
            Loads native dll into process.
            </summary>
            <param name="directoryPath">Full path to directory where dll located.</param>
            <param name="name">Name with extension of dll to load.</param>
            <returns></returns>
        </member>
        <member name="M:NRegFreeCom.IAssemblySystem.ReflectionOnlyLoadFrom(System.String)">
            <summary>
            Loads dll into process.You cannot execute code from an assembly that has been loaded such way.
            </summary>
            <param name="path"></param>
            <returns></returns>
            <seealso href="http://msdn.microsoft.com/en-us/library/system.reflection.assembly.reflectiononlyloadfrom.aspx"/>
        </member>
        <member name="M:NRegFreeCom.IAssemblySystem.LoadFrom(System.String)">
            <summary>
            Loads native dll into process.
            </summary>
            <param name="path">Full path to dll file.</param>
            <returns></returns>
        </member>
        <member name="M:NRegFreeCom.IAssemblySystem.AddSearchPath(System.String)">
            <summary>
            Adds directoy to search pathes. 
            When this <see cref="T:NRegFreeCom.AssemblySystem"/> loads new dll then dependecies of it are looked in added paths.
            This is  unsafe hack for XP (but works). Safe on Vista/Win7 with patch applied, it here on Win8.
            </summary>
            <param name="directory">Full path to directoy</param>
            <see href="http://support.microsoft.com/kb/2533623"/>
            <seealso href="http://msdn.microsoft.com/en-us/library/ff919712.aspx"/>
            <seealso href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682586.aspx"/>
        </member>
        <member name="F:NRegFreeCom.AssemblySystem.Win32Directory">
            <summary>
            Default subdirectory to search 32 bit x86  dlls for <see cref="M:NRegFreeCom.AssemblySystem.GetAnyCpuPath(System.String)"/> .
            </summary>
        </member>
        <member name="F:NRegFreeCom.AssemblySystem.x64Directory">
            <summary>
            Default subdirectory to search 64 bit x86  dlls for <see cref="M:NRegFreeCom.AssemblySystem.GetAnyCpuPath(System.String)"/> .
            </summary>
        </member>
        <member name="F:NRegFreeCom.AssemblySystem._systemSupportsPatch">
            Windows 7, Windows Server 2008 R2, Windows Vista, and Windows Server 2008: 
              To use this function in an application, call GetProcAddress to retrieve the function's address from Kernel32.dll. 
             KB2533623 must be installed on the target platform.
        </member>
        <member name="M:NRegFreeCom.AssemblySystem.GetAnyCpuPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRegFreeCom.AssemblySystem.LoadFrom(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRegFreeCom.AssemblySystem.LoadFrom(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRegFreeCom.AssemblySystem.AddSearchPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NRegFreeCom.Interop.CLSCTX">
            <summary>
            Values from the CLSCTX enumeration are used in activation calls to 
            indicate the execution contexts in which an object is to be run. These
            values are also used in calls to CoRegisterClassObject to indicate the
            set of execution contexts in which a class object is to be made available
            for requests to construct instances.
            </summary>
        </member>
        <member name="T:NRegFreeCom.Dispatcher">
            <summary>
            
            </summary>
            <seealso cref="!:System.Windows.Threading.Dispatcher"/>
        </member>
        <member name="T:NRegFreeCom.IDispatcher">
            <summary>
            Like <see cref="!:System.Windows.Threadin.Dispatcher"/> but without WPF libs and other stuff.
            </summary>
        </member>
        <member name="M:NRegFreeCom.Dispatcher.Run">
            <summary>
            Runs the standard message loop. The message loop quits when it receives the WM_QUIT message.
            </summary>
        </member>
        <member name="T:NRegFreeCom.Regasm">
            <summary>
            Registers and unregisters COM objects for current user.
            </summary>
        </member>
        <member name="M:NRegFreeCom.Regasm.RegisterLocalServer(System.Type)">
            <summary>
            Register the component as a local server.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:NRegFreeCom.Regasm.UnregisterLocalServer(System.Type)">
            <summary>
            Unregister the component.
            </summary>
            <param name="t"></param>
        </member>
        <member name="T:NRegFreeCom.PeHeaderReader">
            <summary>
            Reads in the header information of the Portable Executable format.
            Provides information such as the date the assembly was compiled.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.dosHeader">
            <summary>
            The DOS header
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.fileHeader">
            <summary>
            The file header
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.optionalHeader32">
            <summary>
            Optional 32 bit file header 
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.optionalHeader64">
            <summary>
            Optional 64 bit file header 
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.imageSectionHeaders">
            <summary>
            Image Section headers. Number of sections is in the file header.
            </summary>
        </member>
        <member name="M:NRegFreeCom.PeHeaderReader.GetCallingAssemblyHeader">
            <summary>
            Gets the header of the .NET assembly that called this function
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRegFreeCom.PeHeaderReader.GetAssemblyHeader">
            <summary>
            Gets the header of the .NET assembly that called this function
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRegFreeCom.PeHeaderReader.FromBinaryReader``1(System.IO.BinaryReader)">
            <summary>
            Reads in a block from a file and converts it to the struct
            type specified by the template parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="P:NRegFreeCom.PeHeaderReader.Is32BitHeader">
            <summary>
            Gets if the file header is 32 bit or not
            </summary>
        </member>
        <member name="P:NRegFreeCom.PeHeaderReader.FileHeader">
            <summary>
            Gets the file header
            </summary>
        </member>
        <member name="P:NRegFreeCom.PeHeaderReader.OptionalHeader32">
            <summary>
            Gets the optional header
            </summary>
        </member>
        <member name="P:NRegFreeCom.PeHeaderReader.OptionalHeader64">
            <summary>
            Gets the optional header
            </summary>
        </member>
        <member name="P:NRegFreeCom.PeHeaderReader.TimeStamp">
            <summary>
            Gets the timestamp from the file header
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.TypeReg">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.TypeDsect">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.TypeNoLoad">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.TypeGroup">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.TypeNoPadded">
            <summary>
            The section should not be padded to the next boundary. This flag is obsolete and is replaced by IMAGE_SCN_ALIGN_1BYTES. This is valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.TypeCopy">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.ContentCode">
            <summary>
            The section contains executable code.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.ContentInitializedData">
            <summary>
            The section contains initialized data.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.ContentUninitializedData">
            <summary>
            The section contains uninitialized data.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.LinkOther">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.LinkInfo">
            <summary>
            The section contains comments or other information. The .drectve section has this type. This is valid for object files only.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.TypeOver">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.LinkRemove">
            <summary>
            The section will not become part of the image. This is valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.LinkComDat">
            <summary>
            The section contains COMDAT data. For more information, see section 5.5.6, COMDAT Sections (Object Only). This is valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.NoDeferSpecExceptions">
            <summary>
            Reset speculative exceptions handling bits in the TLB entries for this section.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.RelativeGP">
            <summary>
            The section contains data referenced through the global pointer (GP).
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.MemPurgeable">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.Memory16Bit">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.MemoryLocked">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.MemoryPreload">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.Align1Bytes">
            <summary>
            Align data on a 1-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.Align2Bytes">
            <summary>
            Align data on a 2-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.Align4Bytes">
            <summary>
            Align data on a 4-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.Align8Bytes">
            <summary>
            Align data on an 8-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.Align16Bytes">
            <summary>
            Align data on a 16-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.Align32Bytes">
            <summary>
            Align data on a 32-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.Align64Bytes">
            <summary>
            Align data on a 64-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.Align128Bytes">
            <summary>
            Align data on a 128-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.Align256Bytes">
            <summary>
            Align data on a 256-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.Align512Bytes">
            <summary>
            Align data on a 512-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.Align1024Bytes">
            <summary>
            Align data on a 1024-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.Align2048Bytes">
            <summary>
            Align data on a 2048-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.Align4096Bytes">
            <summary>
            Align data on a 4096-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.Align8192Bytes">
            <summary>
            Align data on an 8192-byte boundary. Valid only for object files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.LinkExtendedRelocationOverflow">
            <summary>
            The section contains extended relocations.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.MemoryDiscardable">
            <summary>
            The section can be discarded as needed.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.MemoryNotCached">
            <summary>
            The section cannot be cached.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.MemoryNotPaged">
            <summary>
            The section is not pageable.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.MemoryShared">
            <summary>
            The section can be shared in memory.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.MemoryExecute">
            <summary>
            The section can be executed as code.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.MemoryRead">
            <summary>
            The section can be read.
            </summary>
        </member>
        <member name="F:NRegFreeCom.PeHeaderReader.DataSectionFlags.MemoryWrite">
            <summary>
            The section can be written to.
            </summary>
        </member>
        <member name="T:NRegFreeCom.Interop.ComTypes.IClassFactory">
            <summary>
            You must implement this interface for every class that you register in 
            the system registry and to which you assign a CLSID, so objects of that
            class can be created.
            http://msdn.microsoft.com/en-us/library/ms694364.aspx
            </summary>
        </member>
        <member name="M:NRegFreeCom.Interop.ComTypes.IClassFactory.CreateInstance(System.IntPtr,System.Guid@,System.IntPtr@)">
            <summary>
            Creates an uninitialized object.
            </summary>
            <param name="pUnkOuter"></param>
            <param name="riid">
            Reference to the identifier of the interface to be used to 
            communicate with the newly created object. If pUnkOuter is NULL, this
            parameter is frequently the IID of the initializing interface.
            </param>
            <param name="ppvObject">
            Address of pointer variable that receives the interface pointer 
            requested in riid. 
            </param>
            <returns>S_OK means success.</returns>
        </member>
        <member name="M:NRegFreeCom.Interop.ComTypes.IClassFactory.LockServer(System.Boolean)">
            <summary>
            Locks object application open in memory.
            </summary>
            <param name="fLock">
            If TRUE, increments the lock count; 
            if FALSE, decrements the lock count.
            </param>
            <returns>S_OK means success.</returns>
        </member>
        <member name="T:NRegFreeCom.StaComCrossThreadInvoker">
            <summary>
             Rejected COM calls will retry automatically in current thread when instance of this object is used.
             </summary>
            <example>   
             Clients of STA COM servers (Excel,Word,etc.) should use it before calling any methods from thread other then in which COM was created.
             <code>
             using (new StaComCrossThreadInvoker())
             {     
                 ...
             }
             </code>
             </example>
            <remarks>
             Provides <see cref="T:NRegFreeCom.Interop.ComTypes.IMessageFilter"/> implementation with interface oriented on .NET CLIENTS to COM STA SERVERS only.
             </remarks>
            <seealso href="http://blogs.msdn.com/b/andreww/archive/2008/11/19/implementing-imessagefilter-in-an-office-add-in.aspx"/>
             <seealso href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms693740.aspx"/>
        </member>
        <member name="M:NRegFreeCom.StaComCrossThreadInvoker.#ctor">
            <summary>
            Creates and registers this filter.
            </summary>
        </member>
        <member name="M:NRegFreeCom.StaComCrossThreadInvoker.#ctor(System.UInt32)">
            <summary>
            Creates and registers this filter.
            </summary>
            <param name="maximumTotalWaitTimeInMilliseconds">
            Number of milliseconds before message filter stops spin waiting call to finish, call canceled and COM exceptions popup.
            </param>
        </member>
        <member name="M:NRegFreeCom.StaComCrossThreadInvoker.Dispose">
            <summary>
            Unregisters common filter and returns back previous one.
            </summary>
        </member>
        <member name="M:NRegFreeCom.StaComCrossThreadInvoker.ShouldRetry(System.UInt32)">
            <summary>
            Override to provide custom logic when retry happens. Can be used to show some notification to user.
            </summary>
            <param name="elpasedTotalWaitTimeInMilliseconds">Total time user already waited call to finish in milliseconds</param>
            <returns></returns>
        </member>
        <member name="P:NRegFreeCom.StaComCrossThreadInvoker.AffinedThreadId">
            <summary>
            <see cref="P:System.Threading.Thread.ManagedThreadId"/> were this object was created, can be used and should be disposed.
            </summary>
        </member>
        <member name="T:NRegFreeCom.Interop.ACTCTX">
            <summary>
            Activation context structure
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.SYSTEM_ERROR_CODES.ERROR_FILE_NOT_FOUND">
            <summary>
            The system cannot find the file specified
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.SYSTEM_ERROR_CODES.ERROR_ENVVAR_NOT_FOUND">
            <summary>
            The system could not find the environment option that was entered (203).
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.SYSTEM_ERROR_CODES.ERROR_INVALID_PARAMETER">
            <summary>
            The parameter is incorrect (87).
            </summary>
        </member>
        <member name="T:NRegFreeCom.Interop.LOAD_LIBRARY_FLAGS">
            <summary>
            
            </summary>
            <seealso href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms684179.aspx"/>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_ACCEPTFILES">
            <summary>
            Specifies that a window created with this style accepts drag-drop files.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_APPWINDOW">
            <summary>
            Forces a top-level window onto the taskbar when the window is visible.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_CLIENTEDGE">
            <summary>
            Specifies that a window has a border with a sunken edge.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_COMPOSITED">
            <summary>
            Windows XP: Paints all descendants of a window in bottom-to-top painting order using double-buffering. For more information, see Remarks. This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_CONTEXTHELP">
            <summary>
            Includes a question mark in the title bar of the window. When the user clicks the question mark, the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message. The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command. The Help application displays a pop-up window that typically contains help for the child window.
            WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_CONTROLPARENT">
            <summary>
            The window itself contains child windows that should take part in dialog box navigation. If this style is specified, the dialog manager recurses into children of this window when performing navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_DLGMODALFRAME">
            <summary>
            Creates a window that has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle parameter.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_LAYERED">
            <summary>
            Windows 2000/XP: Creates a layered window. Note that this cannot be used for child windows. Also, this cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_LAYOUTRTL">
            <summary>
            Arabic and Hebrew versions of Windows 98/Me, Windows 2000/XP: Creates a window whose horizontal origin is on the right edge. Increasing horizontal values advance to the left. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_LEFT">
            <summary>
            Creates a window that has generic left-aligned properties. This is the default.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_LEFTSCROLLBAR">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical scroll bar (if present) is to the left of the client area. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_LTRREADING">
            <summary>
            The window text is displayed using left-to-right reading-order properties. This is the default.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_MDICHILD">
            <summary>
            Creates a multiple-document interface (MDI) child window.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_NOACTIVATE">
            <summary>
            Windows 2000/XP: A top-level window created with this style does not become the foreground window when the user clicks it. The system does not bring this window to the foreground when the user minimizes or closes the foreground window. 
            To activate the window, use the SetActiveWindow or SetForegroundWindow function.
            The window does not appear on the taskbar by default. To force the window to appear on the taskbar, use the WS_EX_APPWINDOW style.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_NOINHERITLAYOUT">
            <summary>
            Windows 2000/XP: A window created with this style does not pass its window layout to its child windows.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_NOPARENTNOTIFY">
            <summary>
            Specifies that a child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_OVERLAPPEDWINDOW">
            <summary>
            Combines the WS_EX_CLIENTEDGE and WS_EX_WINDOWEDGE styles.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_PALETTEWINDOW">
            <summary>
            Combines the WS_EX_WINDOWEDGE, WS_EX_TOOLWINDOW, and WS_EX_TOPMOST styles.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_RIGHT">
            <summary>
            The window has generic "right-aligned" properties. This depends on the window class. This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports reading-order alignment; otherwise, the style is ignored.
            Using the WS_EX_RIGHT style for static or edit controls has the same effect as using the SS_RIGHT or ES_RIGHT style, respectively. Using this style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_RIGHTSCROLLBAR">
            <summary>
            Vertical scroll bar (if present) is to the right of the client area. This is the default.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_RTLREADING">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment, the window text is displayed using right-to-left reading-order properties. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_STATICEDGE">
            <summary>
            Creates a window with a three-dimensional border style intended to be used for items that do not accept user input.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_TOOLWINDOW">
            <summary>
            Creates a tool window; that is, a window intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB. If a tool window has a system menu, its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE. 
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_TOPMOST">
            <summary>
            Specifies that a window created with this style should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. To add or remove this style, use the SetWindowPos function.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_TRANSPARENT">
            <summary>
            Specifies that a window created with this style should not be painted until siblings beneath the window (that were created by the same thread) have been painted. The window appears transparent because the bits of underlying sibling windows have already been painted.
            To achieve transparency without these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStylesEx.WS_EX_WINDOWEDGE">
            <summary>
            Specifies that a window has a border with a raised edge.
            </summary>
        </member>
        <member name="T:NRegFreeCom.Interop.WindowStyles">
            <summary>
            Window Styles.
            The following styles can be specified wherever a window style is required. After the control has been created, these styles cannot be modified, except as noted.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_BORDER">
            <summary>The window has a thin-line border.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_CAPTION">
            <summary>The window has a title bar (includes the WS_BORDER style).</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_CHILD">
            <summary>The window is a child window. A window with this style cannot have a menu bar. This style cannot be used with the WS_POPUP style.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_CLIPCHILDREN">
            <summary>Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated.
            If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_DISABLED">
            <summary>The window is initially disabled. A disabled window cannot receive input from the user. To change this after a window has been created, use the EnableWindow function.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_DLGFRAME">
            <summary>The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_GROUP">
            <summary>
            The window is the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style.
            The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_HSCROLL">
            <summary>The window has a horizontal scroll bar.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_MAXIMIZE">
            <summary>The window is initially maximized.</summary> 
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_MAXIMIZEBOX">
            <summary>The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary> 
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_MINIMIZE">
            <summary>The window is initially minimized.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_MINIMIZEBOX">
            <summary>The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_OVERLAPPED">
            <summary>The window is an overlapped window. An overlapped window has a title bar and a border.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_OVERLAPPEDWINDOW">
            <summary>The window is an overlapped window.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_POPUP">
            <summary>The window is a pop-up window. This style cannot be used with the WS_CHILD style.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_POPUPWINDOW">
            <summary>The window is a pop-up window. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_SIZEFRAME">
            <summary>The window has a sizing border.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_SYSMENU">
            <summary>The window has a window menu on its title bar. The WS_CAPTION style must also be specified.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_TABSTOP">
            <summary>
            The window is a control that can receive the keyboard focus when the user presses the TAB key.
            Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.  
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_VISIBLE">
            <summary>The window is initially visible. This style can be turned on and off by using the ShowWindow or SetWindowPos function.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WindowStyles.WS_VSCROLL">
            <summary>The window has a vertical scroll bar.</summary>
        </member>
        <member name="M:NRegFreeCom.Assembly.GetDelegate``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NRegFreeCom.Assembly.TryGetDelegate``1(``0@,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NRegFreeCom.Interop.CoInit">
            <summary>Determines the concurrency model used for incoming calls to objects created by this thread. This concurrency model can be either apartment-threaded or multi-threaded.</summary>
        </member>
        <member name="F:NRegFreeCom.Interop.CoInit.MultiThreaded">
            <summary>
            Initializes the thread for apartment-threaded object concurrency.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.CoInit.ApartmentThreaded">
            <summary>
            Initializes the thread for multi-threaded object concurrency.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.CoInit.DisableOle1Dde">
            <summary>
            Disables DDE for OLE1 support.
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.CoInit.SpeedOverMemory">
            <summary>
            Trade memory for speed.
            </summary>
        </member>
        <member name="T:NRegFreeCom.ActivationContext">
            <summary>
             Used tune activation context stack of thread for intializing and loading SxS components.
             </summary>
            <seealso cref="!:Microsoft.Windows.ActCtx"/>
            <seealso href="http://www.atalasoft.com/blogs/spikemclarty/february-2012/dynamically-testing-an-activex-control-from-c-and"/>
        </member>
        <member name="M:NRegFreeCom.ActivationContext.CreateInstanceWithManifest(System.Guid,System.String)">
            <summary>
            Create an instance of a COM object given the GUID of its class
            and a filepath of a client manifest (AKA an application manifest.)
            </summary>
            <param name="guid">GUID = CLSID of the COM object, {NNNN...NNN}</param>
            <param name="manifest">full path of manifest to activate, should list the
            desired COM class as a dependentAssembly.</param>
            <returns>An instance of the specified COM class, or null.</returns>
        </member>
        <member name="M:NRegFreeCom.ActivationContext.UsingManifestDo(System.String,NRegFreeCom.ActivationContext.doSomething)">
            <summary>
            Applies content of <paramref name="pathToManifest"/> file to current context, invokes <paramref name="thingToDo"/> delegate, deactivates applied context.
            </summary>
            <param name="pathToManifest"></param>
            <param name="thingToDo"></param>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:NRegFreeCom.ActivationContext.UsingAssemblyManifestDo(System.Reflection.Assembly,NRegFreeCom.ActivationContext.doSomething)">
            <summary>
            Given CLR assembly search manifest of it located in the same folder with .manifest suffix.
            Activates manifest found, invokes <paramref name="thingToDo"/> delegate, deactivates applied context. 
            </summary>
            <param name="assembly"></param>
            <param name="action"></param>
        </member>
        <member name="M:NRegFreeCom.ActivationContext.CreateInstanceDirectly(NRegFreeCom.IAssembly,System.Guid)">
            <summary>
            Creates  COM class instance directly without using any COM Activation or thread Marshaling services.
            </summary>
            <param name="libraryModule"></param>
            <param name="clsid"></param>
            <returns></returns>
        </member>
        <member name="F:NRegFreeCom.Interop.WELL_KNOWN_IIDS.IID_IUnknown">
            <summary>
            Interface Id of IUnknown
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WELL_KNOWN_IIDS.IID_IDispatch">
            <summary>
            Interface Id of IDispatch
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.WELL_KNOWN_IIDS.IID_IClassFactory">
            <summary>
            Interface Id of IClassFactory
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.NativeMethods.CLASS_E_NOAGGREGATION">
            <summary>
            Class does not support aggregation (or class object is remote)
            </summary>
        </member>
        <member name="F:NRegFreeCom.Interop.NativeMethods.E_NOINTERFACE">
            <summary>
            No such interface supported
            </summary>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.OleLoadPicturePath(System.String,System.IntPtr,System.UInt32,System.UInt32,System.Guid@,NRegFreeCom.Interop.ComTypes.IUnknown@)">
            <summary>
            http://msdn.microsoft.com/en-us/library/windows/desktop/ms678485.aspx
                            HRESULT OleLoadPicturePath(
              _In_   LPOLESTR szURLorPath,
              _In_   LPUNKNOWN punkCaller,
              _In_   DWORD dwReserved,
              _In_   OLE_COLOR clrReserved,
              _In_   REFIID riid,
              _Out_  LPVOID *ppvRet
            );
               </summary>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.UnregisterClass(System.IntPtr,System.IntPtr)">
            <summary>
            Unregisters a window class, freeing the memory required for the class.
            </summary>
            <param name="lpClassName">
            Type: LPCTSTR
            A null-terminated string or a class atom. If lpClassName is a string, it specifies the window class name. 
            This class name must have been registered by a previous call to the RegisterClass or RegisterClassEx function. 
            System classes, such as dialog box controls, cannot be unregistered. If this parameter is an atom, 
              it must be a class atom created by a previous call to the RegisterClass or RegisterClassEx function. 
            The atom must be in the low-order word of lpClassName; the high-order word must be zero.
            
            </param>
            <param name="hInstance">
            A handle to the instance of the module that created the class.
            
            </param>
            <returns>
            Type: BOOL
            If the function succeeds, the return value is nonzero.
            If the class could not be found or if a window still exists that was created with the class, the return value is zero. 
            To get extended error information, call GetLastError.
            
            </returns>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.CreateWindowEx(NRegFreeCom.Interop.WindowStylesEx,System.IntPtr,System.String,NRegFreeCom.Interop.WindowStyles,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            The CreateWindowEx function creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function. 
            </summary>
            <param name="dwExStyle">Specifies the extended window style of the window being created.</param>
            <param name="lpClassName">Pointer to a null-terminated string or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero. If lpClassName is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names.</param>
            <param name="lpWindowName">Pointer to a null-terminated string that specifies the window name. If the window style specifies a title bar, the window title pointed to by lpWindowName is displayed in the title bar. When using CreateWindow to create controls, such as buttons, check boxes, and static controls, use lpWindowName to specify the text of the control. When creating a static control with the SS_ICON style, use lpWindowName to specify the icon name or identifier. To specify an identifier, use the syntax "#num". </param>
            <param name="dwStyle">Specifies the style of the window being created. This parameter can be a combination of window styles, plus the control styles indicated in the Remarks section.</param>
            <param name="x">Specifies the initial horizontal position of the window. For an overlapped or pop-up window, the x parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, x is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If x is set to CW_USEDEFAULT, the system selects the default position for the window's upper-left corner and ignores the y parameter. CW_USEDEFAULT is valid only for overlapped windows; if it is specified for a pop-up or child window, the x and y parameters are set to zero.</param>
            <param name="y">Specifies the initial vertical position of the window. For an overlapped or pop-up window, the y parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, y is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box y is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.
            <para>If an overlapped window is created with the WS_VISIBLE style bit set and the x parameter is set to CW_USEDEFAULT, then the y parameter determines how the window is shown. If the y parameter is CW_USEDEFAULT, then the window manager calls ShowWindow with the SW_SHOW flag after the window has been created. If the y parameter is some other value, then the window manager calls ShowWindow with that value as the nCmdShow parameter.</para></param>
            <param name="nWidth">Specifies the width, in device units, of the window. For overlapped windows, nWidth is the window's width, in screen coordinates, or CW_USEDEFAULT. If nWidth is CW_USEDEFAULT, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. CW_USEDEFAULT is valid only for overlapped windows; if CW_USEDEFAULT is specified for a pop-up or child window, the nWidth and nHeight parameter are set to zero.</param>
            <param name="nHeight">Specifies the height, in device units, of the window. For overlapped windows, nHeight is the window's height, in screen coordinates. If the nWidth parameter is set to CW_USEDEFAULT, the system ignores nHeight.</param> <param name="hWndParent">Handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.
            <para>Windows 2000/XP: To create a message-only window, supply HWND_MESSAGE or a handle to an existing message-only window.</para></param>
            <param name="hMenu">Handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, hMenu identifies the menu to be used with the window; it can be NULL if the class menu is to be used. For a child window, hMenu specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</param>
            <param name="hInstance">Handle to the instance of the module to be associated with the window.</param> <param name="lpParam">Pointer to a value to be passed to the window through the CREATESTRUCT structure (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message. This message is sent to the created window by this function before it returns.
            <para>If an application calls CreateWindow to create a MDI client window, lpParam should point to a CLIENTCREATESTRUCT structure. If an MDI client window calls CreateWindow to create an MDI child window, lpParam should point to a MDICREATESTRUCT structure. lpParam may be NULL if no additional data is needed.</para></param>
            <returns>If the function succeeds, the return value is a handle to the new window.
            <para>If the function fails, the return value is NULL. To get extended error information, call GetLastError.</para>
            <para>This function typically fails for one of the following reasons:</para>
            <list type="">
            <item>an invalid parameter value</item>
            <item>the system class was registered by a different module</item>
            <item>The WH_CBT hook is installed and returns a failure code</item>
            <item>if one of the controls in the dialog template is not registered, or its window window procedure fails WM_CREATE or WM_NCCREATE</item>
            </list></returns>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.GetDllDirectory(System.Int32,System.Text.StringBuilder)">
            <summary>
                    DWORD WINAPI GetDllDirectory(
              _In_   DWORD nBufferLength,
              _Out_  LPTSTR lpBuffer
            );
             </summary>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.AddDllDirectory(System.String)">
            <summary>
                    DLL_DIRECTORY_COOKIE  WINAPI AddDllDirectory(
              _In_  PCWSTR NewDirectory
            );
             </summary>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.SetDefaultDllDirectories(NRegFreeCom.Interop.DIRECTORY_FLAGS)">
            <summary>
                     BOOL  WINAPI SetDefaultDllDirectories(
              _In_  DWORD DirectoryFlags
            );
             </summary>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.RemoveDllDirectory(System.IntPtr)">
            <summary>
                   BOOL  WINAPI RemoveDllDirectory(
            _In_  DLL_DIRECTORY_COOKIE Cookie
            );
             </summary>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.SetDllDirectory(System.String)">
            <seealso href="http://search.microsoft.com/en-US/results.aspx?q=SetDllDirectory"/>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.LoadLibraryEx(System.String,System.IntPtr,NRegFreeCom.Interop.LOAD_LIBRARY_FLAGS)">
            <summary>
            
            </summary>
            <param name="lpFileName"></param>
            <param name="hFile"></param>
            <param name="dwFlags">The action to be taken when loading the module. If no flags are specified, the behavior of this function is identical to that of the LoadLibrary function. This parameter can be one of the following values.</param>
            <returns></returns>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.CoInitializeEx(System.IntPtr,NRegFreeCom.Interop.CoInit)">
            <summary>Initializes the COM library for use by the calling thread, sets the thread's concurrency model, and creates a new apartment for the thread if one is required.</summary>
            <param name="pvReserved">This parameter is reserved and must be NULL.</param>
            <param name="coInit">The concurrency model and initialization options for the thread. Values for this parameter are taken from the CoInit enumeration. Any combination of values can be used, except that the ApartmentThreaded and MultiThreaded flags cannot both be set. The default is MultiThreaded.</param>
            <returns>If function succeeds, it returns S_OK. Otherwise, it returns an error code.</returns>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.CoUninitialize">
            <summary>
            CoUninitialize() is used to uninitialize a COM thread.
            </summary>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.CoRegisterClassObject(System.Guid@,NRegFreeCom.Interop.ComTypes.IClassFactory,NRegFreeCom.Interop.CLSCTX,NRegFreeCom.Interop.REGCLS,System.UInt32@)">
            <summary>
            Registers an EXE class object with OLE so other applications can 
            connect to it. EXE object applications should call 
            CoRegisterClassObject on startup. It can also be used to register 
            internal objects for use by the same EXE or other code (such as DLLs)
            that the EXE uses.
            </summary>
            <param name="rclsid">CLSID to be registered</param>
            <param name="pUnk">
            Pointer to the IUnknown interface on the class object whose 
            availability is being published.
            </param>
            <param name="dwClsContext">
            Context in which the executable code is to be run.
            </param>
            <param name="flags">
            How connections are made to the class object.
            </param>
            <param name="lpdwRegister">
            Pointer to a value that identifies the class object registered; 
            </param>
            <returns></returns>
            <remarks>
            PInvoking CoRegisterClassObject to register COM objects is not 
            supported.
            </remarks>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.CoRevokeClassObject(System.UInt32)">
            <summary>
            Informs OLE that a class object, previously registered with the 
            CoRegisterClassObject function, is no longer available for use.
            </summary>
            <param name="dwRegister">
            Token previously returned from the CoRegisterClassObject function
            </param>
            <returns></returns>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.CoResumeClassObjects">
            <summary>
            Called by a server that can register multiple class objects to inform 
            the SCM about all registered classes, and permits activation requests 
            for those class objects.
            </summary>
            <returns></returns>
            <remarks>
            Servers that can register multiple class objects call 
            CoResumeClassObjects once, after having first called 
            CoRegisterClassObject, specifying REGCLS_LOCAL_SERVER | 
            REGCLS_SUSPENDED for each CLSID the server supports. This function 
            causes OLE to inform the SCM about all the registered classes, and 
            begins letting activation requests into the server process.
            
            This reduces the overall registration time, and thus the server 
            application startup time, by making a single call to the SCM, no 
            matter how many CLSIDs are registered for the server. Another 
            advantage is that if the server has multiple apartments with 
            different CLSIDs registered in different apartments, or is a free-
            threaded server, no activation requests will come in until the server 
            calls CoResumeClassObjects. This gives the server a chance to 
            register all of its CLSIDs and get properly set up before having to 
            deal with activation requests, and possibly shutdown requests. 
            </remarks>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.GetCurrentThreadId">
            <summary>
            Get current thread ID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.GetCurrentProcessId">
            <summary>
            Get current process ID.
            </summary>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.GetMessage(NRegFreeCom.Interop.MSG@,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The GetMessage function retrieves a message from the calling thread's 
            message queue. The function dispatches incoming sent messages until a 
            posted message is available for retrieval. 
            </summary>
            <param name="lpMsg">
            Pointer to an MSG structure that receives message information from 
            the thread's message queue.
            </param>
            <param name="hWnd">
            Handle to the window whose messages are to be retrieved.
            </param>
            <param name="wMsgFilterMin">
            Specifies the integer value of the lowest message value to be 
            retrieved. 
            </param>
            <param name="wMsgFilterMax">
            Specifies the integer value of the highest message value to be 
            retrieved.
            </param>
            <returns></returns>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.TranslateMessage(NRegFreeCom.Interop.MSG@)">
            <summary>
            The TranslateMessage function translates virtual-key messages into 
            character messages. The character messages are posted to the calling 
            thread's message queue, to be read the next time the thread calls the 
            GetMessage or PeekMessage function.
            </summary>
            <param name="lpMsg"></param>
            <returns></returns>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.DispatchMessage(NRegFreeCom.Interop.MSG@)">
            <summary>
            The DispatchMessage function dispatches a message to a window 
            procedure. It is typically used to dispatch a message retrieved by 
            the GetMessage function.
            </summary>
            <param name="lpMsg"></param>
            <returns></returns>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.DestroyWindow(System.IntPtr)">
            <summary>
            <para>The DestroyWindow function destroys the specified window. The function sends WM_DESTROY and WM_NCDESTROY messages to the window to deactivate it and remove the keyboard focus from it. The function also destroys the window's menu, flushes the thread message queue, destroys timers, removes clipboard ownership, and breaks the clipboard viewer chain (if the window is at the top of the viewer chain).</para>
            <para>If the specified window is a parent or owner window, DestroyWindow automatically destroys the associated child or owned windows when it destroys the parent or owner window. The function first destroys child or owned windows, and then it destroys the parent or owner window.</para>
            <para>DestroyWindow also destroys modeless dialog boxes created by the CreateDialog function.</para>
            </summary>
            <param name="hwnd">Handle to the window to be destroyed.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.PostThreadMessage(System.UInt32,System.UInt32,System.UIntPtr,System.IntPtr)">
            <summary>
            The PostThreadMessage function posts a message to the message queue 
            of the specified thread. It returns without waiting for the thread to 
            process the message.
            </summary>
            <param name="idThread">
            Identifier of the thread to which the message is to be posted.
            </param>
            <param name="Msg">Specifies the type of message to be posted.</param>
            <param name="wParam">
            Specifies additional message-specific information.
            </param>
            <param name="lParam">
            Specifies additional message-specific information.
            </param>
            <returns></returns>
        </member>
        <member name="M:NRegFreeCom.Interop.NativeMethods.GetRunningObjectTable(System.UInt32,System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
            <summary>
            Returns a pointer to the IRunningObjectTable
            interface on the local running object table (ROT).
            </summary>
            <param name="reserved">This parameter is reserved and must be 0.</param>
            <param name="prot">The address of an IRunningObjectTable* pointer variable
            that receives the interface pointer to the local ROT. When the function is
            successful, the caller is responsible for calling Release on the interface
            pointer. If an error occurs, *pprot is undefined.</param>
            <returns>This function can return the standard return values E_UNEXPECTED and S_OK.</returns>
        </member>
        <member name="T:NRegFreeCom.Interop.ComTypes.IServiceProvider">
            <seealso href="http://msdn.microsoft.com/en-us/library/cc678965.aspx"/>
        </member>
        <member name="T:NRegFreeCom.RunningObjectTable">
            <summary>
             Allows manipulations with Running Object Table like add and removing objects, enumerating registered. 
             </summary>
            <seealso href="https://sites.google.com/site/jozsefbekes/Home/windows-programming/dotnet-registering-an-object-to-the-running-object-table-from-a-non-com-project"/>
            <seealso href="https://sites.google.com/site/jozsefbekes/Home/windows-programming/registering-an-object-to-the-running-object-table-from-a-non-com-project"/>
        </member>
        <member name="T:NRegFreeCom.Interop.DEF.DllMain">
            <seealso href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682583.aspx"/>
        </member>
        <member name="M:NRegFreeCom.Interop.ComTypes.IBytesRequestResponse.Execute(System.Byte[])">
            <summary>
            Allows to request COM object with bytes and be responded with bytes.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
    </members>
</doc>
